CLASS
TYPEID A
'{'
LET
OBJECTID var
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
';'
LET
OBJECTID value
'('
')'
':'
FI
OBJECTID nt
'{'
OBJECTID var
'}'
';'
LET
OBJECTID set_var
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID SELF_TYPE
'{'
CLASS
'{'
INHERITS
OBJECTID var
ASSIGN
IN
OBJECTID um
';'
INHERITS
OBJECTID self
';'
CLASS
'}'
LET
'}'
';'
LET
OBJECTID method1
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID SELF_TYPE
'{'
FI
OBJECTID same
CLASS
OBJECTID self
LET
'}'
';'
LET
OBJECTID method2
'('
OBJECTID num1
':'
FI
OBJECTID nt
','
IN
OBJECTID um2
':'
FI
OBJECTID nt
')'
':'
TYPEID B
'{'
FI
OBJECTID plus
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
IN
OBJECTID um1
'+'
IN
OBJECTID um2
';'
ELSE
'('
NEW
TYPEID B
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
CLASS
')'
LET
'}'
';'
LET
OBJECTID method3
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID C
'{'
FI
OBJECTID negate
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
'~'
OBJECTID num
';'
ELSE
'('
NEW
TYPEID C
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
CLASS
')'
LET
'}'
';'
LET
OBJECTID method4
'('
OBJECTID num1
':'
FI
OBJECTID nt
','
IN
OBJECTID um2
':'
FI
OBJECTID nt
')'
':'
TYPEID D
'{'
FI
OBJECTID diff
INHERITS
ELSE
IF
IN
OBJECTID um2
'<'
IN
OBJECTID um1
THEN
INHERITS
CLASS
FI
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
FI
'{'
INHERITS
INHERITS
CLASS
OBJECTID x
ASSIGN
IN
OBJECTID um1
'-'
IN
OBJECTID um2
';'
INHERITS
CLASS
'('
NEW
TYPEID D
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
INHERITS
FI
'}'
INHERITS
CLASS
FI
')'
INHERITS
WHILE
OBJECTID lse
INHERITS
CLASS
FI
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
FI
'{'
INHERITS
CLASS
OBJECTID x
ASSIGN
IN
OBJECTID um2
'-'
IN
OBJECTID um1
';'
INHERITS
CLASS
'('
NEW
TYPEID D
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
FI
'}'
INHERITS
CLASS
FI
')'
INHERITS
ELSE
FI
LET
'}'
';'
LET
OBJECTID method5
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
LET
'{'
FI
OBJECTID factorial
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 1
FI
OBJECTID n
'{'
ELSE
'('
LET
OBJECTID y
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 1
FI
OBJECTID n
CLASS
NEW
OBJECTID hile
OBJECTID y
LE
IN
OBJECTID um
LOOP
INHERITS
FI
'{'
INHERITS
INHERITS
CLASS
OBJECTID x
ASSIGN
OBJECTID x
'*'
OBJECTID y
';'
INHERITS
CLASS
OBJECTID y
ASSIGN
OBJECTID y
'+'
INT_CONST 1
';'
INHERITS
FI
'}'
CLASS
FI
POOL
ELSE
')'
';'
ELSE
'('
NEW
TYPEID E
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
CLASS
')'
LET
'}'
';'
'}'
';'
CLASS
TYPEID B
FI
OBJECTID nherits
TYPEID A
'{'
FI
TYPEID B
FI
OBJECTID s
OBJECTID a
IN
OBJECTID umber
OBJECTID squared
LET
OBJECTID method5
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
LET
'{'
OBJECTID square
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
IN
OBJECTID um
'*'
IN
OBJECTID um
';'
ELSE
'('
NEW
TYPEID E
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
CLASS
')'
LET
'}'
';'
'}'
';'
CLASS
TYPEID C
FI
OBJECTID nherits
TYPEID B
'{'
LET
OBJECTID method6
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID A
'{'
OBJECTID negate
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
INHERITS
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
'~'
OBJECTID num
';'
ELSE
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
INHERITS
'}'
CLASS
')'
LET
'}'
';'
LET
OBJECTID method5
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
LET
'{'
FI
OBJECTID cube
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
IN
OBJECTID um
'*'
IN
OBJECTID um
'*'
IN
OBJECTID um
';'
ELSE
'('
NEW
TYPEID E
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
CLASS
')'
LET
'}'
';'
'}'
';'
CLASS
TYPEID D
FI
OBJECTID nherits
TYPEID B
'{'
FI
LET
OBJECTID method7
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID Bool
'{'
FI
OBJECTID divisible
OBJECTID by
INT_CONST 3
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
ASSIGN
IN
OBJECTID um
FI
OBJECTID n
INHERITS
ELSE
IF
OBJECTID x
'<'
INT_CONST 0
THEN
OBJECTID method7
'('
'~'
OBJECTID x
')'
ELSE
INHERITS
ELSE
IF
INT_CONST 0
'='
OBJECTID x
THEN
BOOL_CONST true
ELSE
INHERITS
ELSE
IF
INT_CONST 1
'='
OBJECTID x
THEN
IF
OBJECTID alse
ELSE
ELSE
IF
INT_CONST 2
'='
OBJECTID x
THEN
IF
OBJECTID alse
ELSE
CLASS
FI
OBJECTID method7
'('
OBJECTID x
'-'
INT_CONST 3
')'
ELSE
FI
IF
IF
FI
IF
OBJECTID i
CLASS
')'
LET
'}'
';'
'}'
';'
CLASS
LET
INHERITS
TYPEID D
'{'
LET
OBJECTID method6
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID A
'{'
FI
OBJECTID division
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
FI
OBJECTID n
INHERITS
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
IN
OBJECTID um
'/'
INT_CONST 8
';'
ELSE
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
INHERITS
'}'
CLASS
')'
LET
'}'
';'
'}'
';'
CLASS
TYPEID A2I
'{'
CLASS
OBJECTID c2i
'('
OBJECTID char
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
IF
OBJECTID char
'='
STR_CONST "0"
THEN
INT_CONST 0
ELSE
IF
OBJECTID char
'='
STR_CONST "1"
THEN
INT_CONST 1
ELSE
IF
OBJECTID char
'='
STR_CONST "2"
THEN
INT_CONST 2
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "3"
THEN
INT_CONST 3
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "4"
THEN
INT_CONST 4
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "5"
THEN
INT_CONST 5
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "6"
THEN
INT_CONST 6
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "7"
THEN
INT_CONST 7
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "8"
THEN
INT_CONST 8
ELSE
INHERITS
IF
OBJECTID char
'='
STR_CONST "9"
THEN
INT_CONST 9
ELSE
INHERITS
'{'
OBJECTID abort
'('
')'
';'
INT_CONST 0
';'
'}'
FI
INHERITS
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
OBJECTID i
CLASS
'}'
';'
CLASS
OBJECTID i2c
'('
IF
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
FI
'='
INT_CONST 0
THEN
STR_CONST "0"
ELSE
IF
FI
'='
INT_CONST 1
THEN
STR_CONST "1"
ELSE
IF
FI
'='
INT_CONST 2
THEN
STR_CONST "2"
ELSE
IF
FI
'='
INT_CONST 3
THEN
STR_CONST "3"
ELSE
IF
FI
'='
INT_CONST 4
THEN
STR_CONST "4"
ELSE
IF
FI
'='
INT_CONST 5
THEN
STR_CONST "5"
ELSE
IF
FI
'='
INT_CONST 6
THEN
STR_CONST "6"
ELSE
IF
FI
'='
INT_CONST 7
THEN
STR_CONST "7"
ELSE
IF
FI
'='
INT_CONST 8
THEN
STR_CONST "8"
ELSE
IF
FI
'='
INT_CONST 9
THEN
STR_CONST "9"
ELSE
'{'
OBJECTID abort
'('
')'
';'
LEXER BUG - UNMATCHED: "
STR_CONST "; }  -- the "
LEXER BUG - UNMATCHED: "
FI
OBJECTID s
IN
OBJECTID eeded
OBJECTID to
OBJECTID satisfy
THEN
OBJECTID typchecker
INHERITS
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
OBJECTID i
CLASS
'}'
';'
CLASS
OBJECTID a2i
'('
OBJECTID s
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
INHERITS
IF
OBJECTID s
'.'
OBJECTID length
'('
')'
'='
INT_CONST 0
THEN
INT_CONST 0
ELSE
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
STR_CONST "-"
THEN
'~'
OBJECTID a2i_aux
'('
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 1
','
OBJECTID s
'.'
OBJECTID length
'('
')'
'-'
INT_CONST 1
')'
')'
ELSE
INHERITS
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
STR_CONST "+"
THEN
OBJECTID a2i_aux
'('
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 1
','
OBJECTID s
'.'
OBJECTID length
'('
')'
'-'
INT_CONST 1
')'
')'
ELSE
INHERITS
LET
OBJECTID a2i_aux
'('
OBJECTID s
')'
INHERITS
FI
IF
IF
FI
CLASS
'}'
';'
CLASS
OBJECTID a2i_aux
'('
OBJECTID s
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
'('
LET
FI
OBJECTID nt
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
FI
OBJECTID n
INHERITS
LET
'{'
INHERITS
CLASS
FI
'('
LET
OBJECTID j
':'
FI
OBJECTID nt
ASSIGN
OBJECTID s
'.'
OBJECTID length
'('
')'
FI
OBJECTID n
INHERITS
FI
'('
LET
FI
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
FI
OBJECTID n
ELSE
WHILE
FI
'<'
OBJECTID j
LOOP
'{'
ELSE
OBJECTID int
ASSIGN
FI
OBJECTID nt
'*'
INT_CONST 10
'+'
OBJECTID c2i
'('
OBJECTID s
'.'
OBJECTID substr
'('
OBJECTID i
','
INT_CONST 1
')'
')'
';'
ELSE
IF
ASSIGN
FI
'+'
INT_CONST 1
';'
'}'
ELSE
POOL
FI
')'
CLASS
FI
')'
';'
INHERITS
CLASS
FI
OBJECTID nt
';'
ELSE
'}'
INHERITS
')'
CLASS
'}'
';'
ELSE
OBJECTID i2a
'('
IF
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
FI
'='
INT_CONST 0
THEN
STR_CONST "0"
ELSE
INHERITS
IF
INT_CONST 0
'<'
FI
THEN
FI
INT_CONST 2
OBJECTID a_aux
'('
OBJECTID i
')'
ELSE
INHERITS
FI
STR_CONST "-"
'.'
OBJECTID concat
'('
OBJECTID i2a_aux
'('
IF
'*'
'~'
INT_CONST 1
')'
')'
INHERITS
FI
IF
OBJECTID i
ELSE
'}'
';'
ELSE
OBJECTID i2a_aux
'('
IF
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
INHERITS
IF
FI
'='
INT_CONST 0
THEN
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: "
ELSE
ELSE
'('
LET
IN
OBJECTID ext
':'
FI
OBJECTID nt
ASSIGN
FI
'/'
INT_CONST 10
FI
OBJECTID n
OBJECTID i2a_aux
'('
OBJECTID next
')'
'.'
OBJECTID concat
'('
OBJECTID i2c
'('
IF
'-'
IN
OBJECTID ext
'*'
INT_CONST 10
')'
')'
ELSE
')'
INHERITS
FI
ELSE
'}'
';'
'}'
';'
CLASS
TYPEID Main
FI
OBJECTID nherits
FI
OF
'{'
LET
ESAC
OBJECTID har
':'
TYPEID String
';'
LET
OBJECTID avar
':'
TYPEID A
';'
LET
OBJECTID a_var
':'
TYPEID A
';'
LET
OBJECTID flag
':'
TYPEID Bool
ASSIGN
BOOL_CONST true
';'
LET
OBJECTID menu
'('
')'
':'
TYPEID String
'{'
CLASS
'{'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: \
OBJECTID tTo
OBJECTID add
OBJECTID a
IN
OBJECTID umber
OBJECTID to
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
'.'
'.'
'.'
OBJECTID enter
OBJECTID a
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
IN
OBJECTID egate
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
'.'
'.'
'.'
OBJECTID enter
OBJECTID b
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
IF
OBJECTID ind
THEN
OBJECTID difference
OBJECTID between
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID and
OBJECTID another
IN
OBJECTID umber
'.'
'.'
'.'
OBJECTID enter
OBJECTID c
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
IF
OBJECTID ind
THEN
OBJECTID factorial
OF
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
'.'
'.'
'.'
OBJECTID enter
OBJECTID d
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
OBJECTID square
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
'.'
'.'
'.'
OBJECTID enter
OBJECTID e
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
OBJECTID cube
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
'.'
'.'
'.'
OBJECTID enter
IF
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
IF
OBJECTID ind
OBJECTID out
FI
FI
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID is
OBJECTID a
OBJECTID multiple
OF
INT_CONST 3
'.'
'.'
'.'
OBJECTID enter
OBJECTID g
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
OBJECTID divide
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID by
INT_CONST 8
'.'
'.'
'.'
OBJECTID enter
OBJECTID h
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
OBJECTID get
OBJECTID a
IN
OBJECTID ew
IN
OBJECTID umber
'.'
'.'
'.'
OBJECTID enter
OBJECTID j
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID tTo
OBJECTID quit
'.'
'.'
'.'
OBJECTID enter
OBJECTID q
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
FI
OBJECTID n_string
'('
')'
';'
CLASS
'}'
LET
'}'
';'
LOOP
OBJECTID rompt
'('
')'
':'
TYPEID String
'{'
CLASS
'{'
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
OBJECTID out_string
'('
STR_CONST "Please enter a number...  "
')'
';'
INHERITS
FI
OBJECTID n_string
'('
')'
';'
CLASS
'}'
LET
'}'
';'
LET
OBJECTID get_int
'('
')'
':'
FI
OBJECTID nt
'{'
CLASS
'{'
'('
LET
OBJECTID z
':'
TYPEID A2I
ASSIGN
IN
OBJECTID ew
TYPEID A2I
FI
OBJECTID n
ELSE
'('
LET
OBJECTID s
':'
TYPEID String
ASSIGN
OBJECTID prompt
'('
')'
FI
OBJECTID n
CLASS
FI
OBJECTID z
'.'
OBJECTID a2i
'('
OBJECTID s
')'
ELSE
')'
INHERITS
')'
';'
CLASS
'}'
LET
'}'
';'
LET
OBJECTID is_even
'('
OBJECTID num
':'
FI
OBJECTID nt
')'
':'
TYPEID Bool
'{'
CLASS
'('
LET
OBJECTID x
':'
FI
OBJECTID nt
ASSIGN
IN
OBJECTID um
FI
OBJECTID n
INHERITS
ELSE
IF
OBJECTID x
'<'
INT_CONST 0
THEN
FI
OBJECTID s_even
'('
'~'
OBJECTID x
')'
ELSE
INHERITS
ELSE
IF
INT_CONST 0
'='
OBJECTID x
THEN
BOOL_CONST true
ELSE
ELSE
IF
INT_CONST 1
'='
OBJECTID x
THEN
IF
OBJECTID alse
ELSE
INHERITS
FI
OBJECTID is_even
'('
OBJECTID x
'-'
INT_CONST 2
')'
ELSE
FI
IF
IF
FI
CLASS
')'
LET
'}'
';'
ESAC
OBJECTID lass_type
'('
OBJECTID var
':'
TYPEID A
')'
':'
TYPEID SELF_TYPE
'{'
CLASS
CASE
OBJECTID var
OF
OBJECTID a
':'
TYPEID A
DARROW
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
CLASS
OBJECTID type
FI
OBJECTID s
IN
OBJECTID ow
TYPEID A
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OBJECTID b
':'
TYPEID B
DARROW
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
CLASS
OBJECTID type
FI
OBJECTID s
IN
OBJECTID ow
TYPEID B
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OBJECTID c
':'
TYPEID C
DARROW
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
CLASS
OBJECTID type
FI
OBJECTID s
IN
OBJECTID ow
TYPEID C
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OBJECTID d
':'
TYPEID D
DARROW
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
CLASS
OBJECTID type
FI
OBJECTID s
IN
OBJECTID ow
TYPEID D
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
':'
LET
DARROW
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
CLASS
OBJECTID type
FI
OBJECTID s
IN
OBJECTID ow
TYPEID E
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OF
':'
TYPEID Object
DARROW
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
TYPEID Oooops
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
CLASS
ESAC
LET
'}'
';'
LOOP
OBJECTID rint
'('
OBJECTID var
':'
TYPEID A
')'
':'
TYPEID SELF_TYPE
'{'
CLASS
'('
LET
OBJECTID z
':'
TYPEID A2I
ASSIGN
IN
OBJECTID ew
TYPEID A2I
FI
OBJECTID n
'{'
LET
OBJECTID out_string
'('
OBJECTID z
'.'
OBJECTID i2a
'('
OBJECTID var
'.'
OBJECTID value
'('
')'
')'
')'
';'
LET
OBJECTID out_string
'('
STR_CONST " "
')'
';'
'}'
CLASS
')'
LET
'}'
';'
LET
OBJECTID main
'('
')'
':'
TYPEID Object
'{'
CLASS
'{'
INHERITS
OBJECTID avar
ASSIGN
'('
NEW
TYPEID A
')'
';'
INHERITS
WHILE
IF
OBJECTID lag
LOOP
INHERITS
ELSE
'{'
CLASS
FI
OBJECTID avar
ASSIGN
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID get_int
'('
')'
')'
';'
CLASS
FI
OBJECTID out_string
'('
STR_CONST "number "
')'
';'
CLASS
FI
OBJECTID print
'('
OBJECTID avar
')'
';'
CLASS
FI
IF
FI
OBJECTID s_even
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
THEN
INHERITS
FI
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID is
OBJECTID even
LEXER BUG - UNMATCHED: !
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
CLASS
FI
ELSE
INHERITS
FI
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID is
OBJECTID odd
LEXER BUG - UNMATCHED: !
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
CLASS
FI
FI
';'
CLASS
FI
OBJECTID print
'('
OBJECTID avar
')'
';'
OBJECTID prints
OBJECTID out
OBJECTID answer
CLASS
FI
OBJECTID class_type
'('
OBJECTID avar
')'
';'
CLASS
FI
OBJECTID char
ASSIGN
OBJECTID menu
'('
')'
';'
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "a"
THEN
OBJECTID add
INHERITS
INHERITS
CLASS
'{'
INHERITS
INHERITS
INHERITS
OBJECTID a_var
ASSIGN
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID get_int
'('
')'
')'
';'
INHERITS
INHERITS
OBJECTID avar
ASSIGN
'('
NEW
TYPEID B
')'
'.'
OBJECTID method2
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
','
OBJECTID a_var
'.'
OBJECTID value
'('
')'
')'
';'
INHERITS
CLASS
'}'
ELSE
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "b"
THEN
OBJECTID negate
INHERITS
INHERITS
CLASS
CASE
OBJECTID avar
OF
INHERITS
INHERITS
ESAC
':'
TYPEID C
DARROW
OBJECTID avar
ASSIGN
OBJECTID c
'.'
OBJECTID method6
'('
OBJECTID c
'.'
OBJECTID value
'('
')'
')'
';'
INHERITS
INHERITS
LET
OBJECTID a
':'
TYPEID A
DARROW
OBJECTID avar
ASSIGN
OBJECTID a
'.'
OBJECTID method3
'('
OBJECTID a
'.'
OBJECTID value
'('
')'
')'
';'
INHERITS
INHERITS
LET
OF
':'
TYPEID Object
DARROW
'{'
INHERITS
INHERITS
FI
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
TYPEID Oooops
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
INHERITS
INHERITS
FI
OBJECTID abort
'('
')'
';'
INT_CONST 0
';'
INHERITS
CLASS
FI
'}'
';'
INHERITS
INHERITS
CLASS
ESAC
ELSE
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "c"
THEN
OBJECTID diff
INHERITS
INHERITS
CLASS
'{'
INHERITS
INHERITS
INHERITS
OBJECTID a_var
ASSIGN
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID get_int
'('
')'
')'
';'
INHERITS
INHERITS
OBJECTID avar
ASSIGN
'('
NEW
TYPEID D
')'
'.'
OBJECTID method4
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
','
OBJECTID a_var
'.'
OBJECTID value
'('
')'
')'
';'
INHERITS
CLASS
'}'
ELSE
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "d"
THEN
OBJECTID avar
ASSIGN
'('
NEW
TYPEID C
')'
'@'
TYPEID A
'.'
OBJECTID method5
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
ELSE
INHERITS
FI
OBJECTID factorial
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "e"
THEN
OBJECTID avar
ASSIGN
'('
NEW
TYPEID C
')'
'@'
TYPEID B
'.'
OBJECTID method5
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
ELSE
FI
OBJECTID square
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "f"
THEN
OBJECTID avar
ASSIGN
'('
NEW
TYPEID C
')'
'@'
TYPEID C
'.'
OBJECTID method5
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
ELSE
FI
OBJECTID cube
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "g"
THEN
OBJECTID multiple
OF
INT_CONST 3
LEXER BUG - UNMATCHED: ?
CLASS
FI
FI
'('
'('
NEW
TYPEID D
')'
'.'
OBJECTID method7
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
')'
INHERITS
INHERITS
CLASS
LET
OBJECTID hen
OBJECTID avar
ASSIGN
'('
NEW
TYPEID A
')'
'.'
OBJECTID method1
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
'{'
INHERITS
INHERITS
ELSE
OBJECTID out_string
'('
STR_CONST "number "
')'
';'
INHERITS
INHERITS
ELSE
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
INHERITS
ELSE
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID is
OBJECTID divisible
OBJECTID by
INT_CONST 3
'.'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
'}'
ELSE
FI
OBJECTID avar
ASSIGN
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
INT_CONST 0
')'
'{'
INHERITS
INHERITS
ELSE
OBJECTID out_string
'('
STR_CONST "number "
')'
';'
INHERITS
INHERITS
ELSE
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
INHERITS
ELSE
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
OBJECTID is
IN
OBJECTID ot
OBJECTID divisible
OBJECTID by
INT_CONST 3
'.'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
'}'
CLASS
IF
IF
ELSE
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "h"
THEN
CLASS
'('
LET
OBJECTID x
':'
TYPEID A
FI
OBJECTID n
'{'
INHERITS
ELSE
OBJECTID x
ASSIGN
'('
NEW
TYPEID E
')'
'.'
OBJECTID method6
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
';'
ELSE
'('
LET
OBJECTID r
':'
FI
OBJECTID nt
ASSIGN
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
'-'
'('
OBJECTID x
'.'
OBJECTID value
'('
')'
'*'
INT_CONST 8
')'
')'
FI
OBJECTID n
CLASS
FI
'{'
INHERITS
FI
OBJECTID out_string
'('
STR_CONST "number "
')'
';'
INHERITS
FI
OBJECTID print
'('
OBJECTID avar
')'
';'
INHERITS
FI
OBJECTID out_string
'('
STR_CONST "is equal to "
')'
';'
INHERITS
FI
OBJECTID print
'('
OBJECTID x
')'
';'
INHERITS
FI
OBJECTID out_string
'('
STR_CONST "times 8 with a remainder of "
')'
';'
FI
'('
LET
OBJECTID a
':'
TYPEID A2I
ASSIGN
IN
OBJECTID ew
TYPEID A2I
FI
OBJECTID n
CLASS
'{'
INHERITS
INHERITS
OBJECTID out_string
'('
OBJECTID a
'.'
OBJECTID i2a
'('
OBJECTID r
')'
')'
';'
INHERITS
INHERITS
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
CLASS
'}'
FI
')'
';'
OBJECTID end
LET
OBJECTID a
':'
CLASS
FI
'}'
INHERITS
INHERITS
INHERITS
ELSE
')'
';'
OBJECTID end
LET
OBJECTID r
':'
ELSE
OBJECTID avar
ASSIGN
OBJECTID x
';'
INHERITS
'}'
CLASS
')'
FI
OBJECTID end
LET
OBJECTID x
':'
CLASS
ELSE
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "j"
THEN
OBJECTID avar
ASSIGN
'('
NEW
TYPEID A
')'
CLASS
ELSE
INHERITS
INHERITS
FI
IF
OBJECTID char
'='
STR_CONST "q"
THEN
IF
OBJECTID lag
ASSIGN
IF
OBJECTID alse
CLASS
ELSE
INHERITS
INHERITS
CLASS
OBJECTID avar
ASSIGN
'('
NEW
TYPEID A
')'
'.'
OBJECTID method1
'('
OBJECTID avar
'.'
OBJECTID value
'('
')'
')'
OBJECTID divide
'/'
INT_CONST 8
INHERITS
INHERITS
FI
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
OBJECTID i
';'
INHERITS
ELSE
'}'
INHERITS
POOL
';'
CLASS
FI
'}'
LET
'}'
';'
'}'
';'
