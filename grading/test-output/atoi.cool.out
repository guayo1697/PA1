'('
'*'
LET
THEN
CLASS
TYPEID A2I
OBJECTID provides
FI
OBJECTID nteger
'-'
OBJECTID to
'-'
OBJECTID string
OBJECTID and
OBJECTID string
'-'
OBJECTID to
'-'
OBJECTID integer
OBJECTID conversion
OBJECTID routines
'.'
LET
OF
OBJECTID use
OBJECTID these
OBJECTID routines
','
OBJECTID either
FI
OBJECTID nherit
OBJECTID them
IN
THEN
CLASS
OBJECTID where
IN
OBJECTID eeded
','
OBJECTID have
OBJECTID a
OBJECTID dummy
OBJECTID variable
OBJECTID bound
OBJECTID to
OBJECTID something
OF
OBJECTID type
TYPEID A2I
','
OBJECTID or
OBJECTID simpl
OBJECTID write
'('
NEW
TYPEID A2I
')'
'.'
OBJECTID method
'('
OBJECTID argument
')'
'.'
'*'
')'
'('
'*'
ESAC
INT_CONST 2
IF
FI
TYPEID Converts
OBJECTID a
INT_CONST 1
'-'
OBJECTID character
OBJECTID string
OBJECTID to
OBJECTID an
FI
OBJECTID nteger
'.'
FI
TYPEID Aborts
INHERITS
FI
FI
THEN
OBJECTID string
FI
OBJECTID s
IN
OBJECTID ot
STR_CONST "0\" through \"9"
'*'
')'
CLASS
TYPEID A2I
'{'
CLASS
OBJECTID c2i
'('
OBJECTID char
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
IF
OBJECTID char
'='
STR_CONST "0\" then 0 else\n\tif char = \"1\" then 1 else\n\tif char = \"2\" then 2 else\n        if char = \"3\" then 3 else\n        if char = \"4\" then 4 else\n        if char = \"5\" then 5 else\n        if char = \"6\" then 6 else\n        if char = \"7\" then 7 else\n        if char = \"8\" then 8 else\n        if char = \"9"
THEN
INT_CONST 9
ELSE
INHERITS
'{'
OBJECTID abort
'('
')'
';'
INT_CONST 0
';'
'}'
FI
'-'
'-'
THEN
INT_CONST 0
FI
OBJECTID s
IN
OBJECTID eeded
OBJECTID to
OBJECTID satisfy
THEN
OBJECTID typchecker
INHERITS
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
OBJECTID i
CLASS
'}'
';'
'('
'*'
LET
OBJECTID i2c
FI
OBJECTID s
THEN
OBJECTID inverse
OF
OBJECTID c2i
'.'
'*'
')'
CLASS
OBJECTID i2c
'('
IF
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
FI
'='
INT_CONST 0
THEN
STR_CONST "0\" else\n\tif i = 1 then \"1\" else\n\tif i = 2 then \"2\" else\n\tif i = 3 then \"3\" else\n\tif i = 4 then \"4\" else\n\tif i = 5 then \"5\" else\n\tif i = 6 then \"6\" else\n\tif i = 7 then \"7\" else\n\tif i = 8 then \"8\" else\n\tif i = 9 then \"9\" else\n\t{ abort(); \"\"; }  -- the \""
FI
OBJECTID s
IN
OBJECTID eeded
OBJECTID to
OBJECTID satisfy
THEN
OBJECTID typchecker
INHERITS
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
OBJECTID i
CLASS
'}'
';'
'('
'*'
LET
OBJECTID a2i
OBJECTID converts
OBJECTID an
TYPEID ASCII
OBJECTID string
FI
OBJECTID nto
OBJECTID an
FI
OBJECTID nteger
'.'
LET
OBJECTID he
OBJECTID empty
OBJECTID string
OBJECTID is
OBJECTID converted
OBJECTID to
INT_CONST 0
'.'
FI
TYPEID Signed
OBJECTID and
OBJECTID unsigned
OBJECTID strings
OBJECTID are
OBJECTID handled
'.'
LET
OBJECTID he
OBJECTID method
OBJECTID aborts
FI
FI
THEN
OBJECTID string
OBJECTID does
IN
OBJECTID ot
OBJECTID represent
OBJECTID an
FI
OBJECTID nteger
'.'
FI
TYPEID Very
OBJECTID long
OBJECTID strings
OF
OBJECTID digits
OBJECTID produce
OBJECTID strange
OBJECTID answers
OBJECTID because
OF
OBJECTID arithmetic
OBJECTID overflow
'.'
'*'
')'
CLASS
OBJECTID a2i
'('
OBJECTID s
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
INHERITS
IF
OBJECTID s
'.'
OBJECTID length
'('
')'
'='
INT_CONST 0
THEN
INT_CONST 0
ELSE
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
STR_CONST "-"
THEN
'~'
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 1
','
OBJECTID s
'.'
OBJECTID length
'('
')'
'-'
INT_CONST 1
')'
')'
ELSE
INHERITS
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
STR_CONST "+"
THEN
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 1
','
OBJECTID s
'.'
OBJECTID length
'('
')'
'-'
INT_CONST 1
')'
')'
ELSE
INHERITS
LET
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
')'
INHERITS
FI
IF
IF
FI
CLASS
'}'
';'
'('
'*'
FI
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
OBJECTID converts
THEN
OBJECTID usigned
OBJECTID portion
OF
THEN
OBJECTID string
'.'
CLASS
OBJECTID a
OBJECTID programming
OBJECTID example
','
OBJECTID this
OBJECTID method
FI
OBJECTID s
OBJECTID written
FI
OBJECTID teratively
'.'
'*'
')'
CLASS
OBJECTID a2i
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID s
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
'('
LET
FI
OBJECTID nt
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
FI
OBJECTID n
INHERITS
LET
'{'
INHERITS
CLASS
FI
'('
LET
OBJECTID j
':'
FI
OBJECTID nt
ASSIGN
OBJECTID s
'.'
OBJECTID length
'('
')'
FI
OBJECTID n
INHERITS
FI
'('
LET
FI
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
FI
OBJECTID n
ELSE
WHILE
FI
'<'
OBJECTID j
LOOP
'{'
ELSE
OBJECTID int
ASSIGN
FI
OBJECTID nt
'*'
INT_CONST 10
'+'
OBJECTID c2i
'('
OBJECTID s
'.'
OBJECTID substr
'('
OBJECTID i
','
INT_CONST 1
')'
')'
';'
ELSE
IF
ASSIGN
FI
'+'
INT_CONST 1
';'
'}'
ELSE
POOL
FI
')'
CLASS
FI
')'
';'
INHERITS
CLASS
FI
OBJECTID nt
';'
ELSE
'}'
INHERITS
')'
CLASS
'}'
';'
'('
'*'
ELSE
OBJECTID i2a
OBJECTID converts
OBJECTID an
FI
OBJECTID nteger
OBJECTID to
OBJECTID a
OBJECTID string
'.'
FI
TYPEID Positive
OBJECTID and
IN
OBJECTID egative
OBJECTID numbers
OBJECTID are
OBJECTID handled
OBJECTID correctly
'.'
FI
'*'
')'
ELSE
OBJECTID i2a
'('
IF
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
FI
'='
INT_CONST 0
THEN
STR_CONST "0\" else \n        if 0 < i then i2a_aux(i) else\n          \"-"
'.'
OBJECTID concat
'('
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
IF
'*'
'~'
INT_CONST 1
')'
')'
INHERITS
FI
IF
OBJECTID i
ELSE
'}'
';'
'('
'*'
ELSE
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
FI
OBJECTID s
OBJECTID an
OBJECTID example
OBJECTID using
OBJECTID recursion
'.'
'*'
')'
ELSE
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
IF
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
INHERITS
IF
FI
'='
INT_CONST 0
THEN
STR_CONST ""
ELSE
ELSE
'('
LET
IN
OBJECTID ext
':'
FI
OBJECTID nt
ASSIGN
FI
'/'
INT_CONST 10
FI
OBJECTID n
OBJECTID i2a
LEXER BUG - UNMATCHED: _
OBJECTID aux
'('
OBJECTID next
')'
'.'
OBJECTID concat
'('
OBJECTID i2c
'('
IF
'-'
IN
OBJECTID ext
'*'
INT_CONST 10
')'
')'
ELSE
')'
INHERITS
FI
ELSE
'}'
';'
'}'
';'
