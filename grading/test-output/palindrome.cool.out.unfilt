#name "./palindrome.cool"
#1 CLASS
#1 TYPEID Main
#1 FI
#1 OBJECTID nherits
#1 FI
#1 OF
#1 '{'
#2 ELSE
#2 OBJECTID pal
#2 '('
#2 OBJECTID s
#2 ':'
#2 TYPEID String
#2 ')'
#2 ':'
#2 TYPEID Bool
#2 '{'
#3 IF
#3 OBJECTID s
#3 '.'
#3 OBJECTID length
#3 '('
#3 ')'
#3 '='
#3 INT_CONST 0
#4 THEN
#4 BOOL_CONST true
#5 ELSE
#5 FI
#5 FI
#5 OBJECTID s
#5 '.'
#5 OBJECTID length
#5 '('
#5 ')'
#5 '='
#5 INT_CONST 1
#6 THEN
#6 BOOL_CONST true
#7 ELSE
#7 FI
#7 FI
#7 OBJECTID s
#7 '.'
#7 OBJECTID substr
#7 '('
#7 INT_CONST 0
#7 ','
#7 INT_CONST 1
#7 ')'
#7 '='
#7 OBJECTID s
#7 '.'
#7 OBJECTID substr
#7 '('
#7 OBJECTID s
#7 '.'
#7 OBJECTID length
#7 '('
#7 ')'
#7 '-'
#7 INT_CONST 1
#7 ','
#7 INT_CONST 1
#7 ')'
#8 THEN
#8 OBJECTID pal
#8 '('
#8 OBJECTID s
#8 '.'
#8 OBJECTID substr
#8 '('
#8 INT_CONST 1
#8 ','
#8 OBJECTID s
#8 '.'
#8 OBJECTID length
#8 '('
#8 ')'
#8 '-'
#8 INT_CONST 2
#8 ')'
#8 ')'
#9 ELSE
#9 IF
#9 OBJECTID alse
#10 FI
#10 IF
#10 IF
#10 FI
#11 ELSE
#11 '}'
#11 ';'
#13 ELSE
#13 IF
#13 ':'
#13 FI
#13 OBJECTID nt
#13 ';'
#15 ELSE
#15 OBJECTID main
#15 '('
#15 ')'
#15 ':'
#15 TYPEID SELF_TYPE
#15 '{'
#16 '{'
#17 INHERITS
#17 ELSE
#17 IF
#17 ASSIGN
#17 '~'
#17 INT_CONST 1
#17 ';'
#18 ELSE
#18 OBJECTID out
LEXER BUG - UNMATCHED: _
#18 OBJECTID string
#18 '('
#18 STR_CONST "enter a string\\n\");\n\t    if pal(in_string())\n\t    then out_string(\"that was a palindrome\\n\")\n\t    else out_string(\"that was not a palindrome\\n"
#18 ')'
#19 ELSE
#19 FI
#19 ';'
#20 '}'
#21 ELSE
#21 '}'
#21 ';'
#22 '}'
#22 ';'
