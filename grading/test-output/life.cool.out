CLASS
TYPEID Board
FI
OBJECTID nherits
FI
OF
'{'
OBJECTID rows
':'
FI
OBJECTID nt
';'
OBJECTID columns
':'
FI
OBJECTID nt
';'
OBJECTID board_size
':'
FI
OBJECTID nt
';'
OBJECTID size_of_board
'('
OBJECTID initial
':'
TYPEID String
')'
':'
FI
OBJECTID nt
'{'
LET
OBJECTID initial
'.'
OBJECTID length
'('
')'
'}'
';'
OBJECTID board_init
'('
OBJECTID start
':'
TYPEID String
')'
':'
TYPEID SELF_TYPE
'{'
LET
'('
LET
OBJECTID size
':'
TYPEID Int
FI
ASSIGN
OBJECTID size_of_board
'('
OBJECTID start
')'
FI
OBJECTID n
ELSE
'{'
IF
OBJECTID size
'='
INT_CONST 15
THEN
'{'
FI
OBJECTID rows
ASSIGN
INT_CONST 3
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 5
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
ELSE
FI
FI
OBJECTID size
'='
INT_CONST 16
THEN
FI
'{'
FI
OBJECTID rows
ASSIGN
INT_CONST 4
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 4
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
ELSE
FI
FI
OBJECTID size
'='
INT_CONST 20
THEN
'{'
FI
OBJECTID rows
ASSIGN
INT_CONST 4
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 5
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
ELSE
FI
FI
OBJECTID size
'='
INT_CONST 21
THEN
'{'
FI
OBJECTID rows
ASSIGN
INT_CONST 3
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 7
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
ELSE
FI
FI
OBJECTID size
'='
INT_CONST 25
THEN
'{'
FI
OBJECTID rows
ASSIGN
INT_CONST 5
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 5
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
ELSE
FI
FI
OBJECTID size
'='
INT_CONST 28
THEN
'{'
FI
OBJECTID rows
ASSIGN
INT_CONST 7
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 4
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
ELSE
IF
IN
OBJECTID one
OF
THEN
OBJECTID above
IF
OBJECTID it
','
THEN
OBJECTID just
OBJECTID give
'{'
FI
THEN
OBJECTID configuration
OF
THEN
OBJECTID most
OBJECTID common
OBJECTID board
FI
OBJECTID rows
ASSIGN
INT_CONST 5
';'
FI
OBJECTID columns
ASSIGN
INT_CONST 5
';'
FI
OBJECTID board_size
ASSIGN
OBJECTID size
';'
'}'
FI
IF
IF
FI
IF
IF
FI
IF
OBJECTID i
';'
OBJECTID self
';'
ELSE
'}'
LET
')'
'}'
';'
'}'
';'
CLASS
TYPEID CellularAutomaton
FI
OBJECTID nherits
TYPEID Board
'{'
ELSE
OBJECTID population_map
':'
TYPEID String
';'
LET
ELSE
OBJECTID init
'('
OBJECTID map
':'
TYPEID String
')'
':'
TYPEID SELF_TYPE
'{'
INHERITS
'{'
INHERITS
ELSE
OBJECTID population_map
ASSIGN
OBJECTID map
';'
ELSE
OBJECTID board_init
'('
OBJECTID map
')'
';'
INHERITS
CLASS
OBJECTID elf
';'
INHERITS
'}'
ELSE
'}'
';'
LET
ELSE
OBJECTID print
'('
')'
':'
TYPEID SELF_TYPE
'{'
INHERITS
'('
LET
FI
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
FI
OBJECTID n
'('
LET
IN
OBJECTID um
':'
FI
OBJECTID nt
ASSIGN
OBJECTID board_size
FI
OBJECTID n
'{'
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
WHILE
FI
'<'
IN
OBJECTID um
LOOP
INHERITS
LET
'{'
ELSE
OBJECTID out_string
'('
OBJECTID population_map
'.'
OBJECTID substr
'('
OBJECTID i
','
OBJECTID columns
')'
')'
';'
ELSE
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
ELSE
IF
ASSIGN
FI
'+'
OBJECTID columns
';'
LET
'}'
POOL
';'
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
OBJECTID self
';'
'}'
')'
')'
ELSE
'}'
';'
LET
ELSE
OBJECTID num_cells
'('
')'
':'
FI
OBJECTID nt
'{'
INHERITS
OBJECTID population_map
'.'
OBJECTID length
'('
')'
ELSE
'}'
';'
LET
ELSE
OBJECTID cell
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
OBJECTID board_size
'-'
INT_CONST 1
'<'
OBJECTID position
THEN
STR_CONST " "
ELSE
INHERITS
OBJECTID population_map
'.'
OBJECTID substr
'('
OBJECTID position
','
INT_CONST 1
')'
FI
ELSE
'}'
';'
LET
IN
OBJECTID orth
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
'('
OBJECTID position
'-'
OBJECTID columns
')'
'<'
INT_CONST 0
THEN
CLASS
STR_CONST " "
INHERITS
INHERITS
CLASS
FI
ELSE
ESAC
OBJECTID ell
'('
OBJECTID position
'-'
OBJECTID columns
')'
FI
'}'
';'
OBJECTID south
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
OBJECTID board_size
'<'
'('
OBJECTID position
'+'
OBJECTID columns
')'
THEN
CLASS
STR_CONST " "
INHERITS
INHERITS
CLASS
ELSE
ESAC
OBJECTID ell
'('
OBJECTID position
'+'
OBJECTID columns
')'
FI
'}'
';'
OBJECTID east
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
'('
'('
'('
OBJECTID position
'+'
INT_CONST 1
')'
'/'
OBJECTID columns
')'
'*'
OBJECTID columns
')'
'='
'('
OBJECTID position
'+'
INT_CONST 1
')'
THEN
CLASS
STR_CONST " "
INHERITS
INHERITS
ELSE
ESAC
OBJECTID ell
'('
OBJECTID position
'+'
INT_CONST 1
')'
FI
'}'
';'
OBJECTID west
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
OBJECTID position
'='
INT_CONST 0
THEN
CLASS
STR_CONST " "
ELSE
LET
IF
'('
'('
OBJECTID position
'/'
OBJECTID columns
')'
'*'
OBJECTID columns
')'
'='
OBJECTID position
THEN
CLASS
STR_CONST " "
ELSE
OBJECTID lse
CLASS
OBJECTID cell
'('
OBJECTID position
'-'
INT_CONST 1
')'
FI
IF
OBJECTID i
'}'
';'
IN
OBJECTID orthwest
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
'('
OBJECTID position
'-'
OBJECTID columns
')'
'<'
INT_CONST 0
THEN
CLASS
STR_CONST " "
INHERITS
INHERITS
CLASS
FI
ELSE
FI
IF
'('
'('
OBJECTID position
'/'
OBJECTID columns
')'
'*'
OBJECTID columns
')'
'='
OBJECTID position
THEN
CLASS
STR_CONST " "
CLASS
ELSE
OBJECTID north
'('
OBJECTID position
'-'
INT_CONST 1
')'
FI
IF
OBJECTID i
'}'
';'
IN
OBJECTID ortheast
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
'('
OBJECTID position
'-'
OBJECTID columns
')'
'<'
INT_CONST 0
THEN
CLASS
STR_CONST " "
ELSE
FI
FI
'('
'('
'('
OBJECTID position
'+'
INT_CONST 1
')'
'/'
OBJECTID columns
')'
'*'
OBJECTID columns
')'
'='
'('
OBJECTID position
'+'
INT_CONST 1
')'
THEN
CLASS
STR_CONST " "
CLASS
CLASS
ELSE
CLASS
FI
OBJECTID north
'('
OBJECTID position
'+'
INT_CONST 1
')'
FI
IF
OBJECTID i
'}'
';'
OBJECTID southeast
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
OBJECTID board_size
'<'
'('
OBJECTID position
'+'
OBJECTID columns
')'
THEN
CLASS
STR_CONST " "
INHERITS
INHERITS
CLASS
ELSE
FI
FI
'('
'('
'('
OBJECTID position
'+'
INT_CONST 1
')'
'/'
OBJECTID columns
')'
'*'
OBJECTID columns
')'
'='
'('
OBJECTID position
'+'
INT_CONST 1
')'
THEN
CLASS
FI
STR_CONST " "
INHERITS
INHERITS
CLASS
ELSE
INHERITS
OBJECTID outh
'('
OBJECTID position
'+'
INT_CONST 1
')'
FI
IF
OBJECTID i
'}'
';'
OBJECTID southwest
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
OBJECTID board_size
'<'
'('
OBJECTID position
'+'
OBJECTID columns
')'
THEN
CLASS
STR_CONST " "
INHERITS
INHERITS
CLASS
ELSE
FI
IF
'('
'('
OBJECTID position
'/'
OBJECTID columns
')'
'*'
OBJECTID columns
')'
'='
OBJECTID position
THEN
CLASS
STR_CONST " "
CLASS
ELSE
INHERITS
OBJECTID outh
'('
OBJECTID position
'-'
INT_CONST 1
')'
FI
IF
OBJECTID i
'}'
';'
IN
OBJECTID eighbors
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
FI
OBJECTID nt
'{'
'{'
CLASS
IF
IN
OBJECTID orth
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID south
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID east
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID west
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID northeast
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID northwest
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID southeast
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
CLASS
'+'
FI
FI
OBJECTID southwest
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
INT_CONST 1
ELSE
INT_CONST 0
IF
OBJECTID i
';'
'}'
'}'
';'
ELSE
ELSE
OBJECTID cell_at_next_evolution
'('
OBJECTID position
':'
FI
OBJECTID nt
')'
':'
TYPEID String
'{'
IF
IN
OBJECTID eighbors
'('
OBJECTID position
')'
'='
INT_CONST 3
THEN
STR_CONST "X"
ELSE
LET
IF
IN
OBJECTID eighbors
'('
OBJECTID position
')'
'='
INT_CONST 2
THEN
IF
OBJECTID cell
'('
OBJECTID position
')'
'='
STR_CONST "X"
THEN
STR_CONST "X"
ELSE
STR_CONST "-"
INHERITS
FI
ELSE
OBJECTID lse
STR_CONST "-"
FI
IF
OBJECTID i
ELSE
'}'
';'
FI
WHILE
OBJECTID volve
'('
')'
':'
TYPEID SELF_TYPE
'{'
INHERITS
'('
LET
OBJECTID position
':'
FI
OBJECTID nt
ASSIGN
INT_CONST 0
FI
OBJECTID n
INHERITS
'('
LET
IN
OBJECTID um
':'
FI
OBJECTID nt
ASSIGN
IN
OBJECTID um_cells
'('
')'
FI
OBJECTID n
INHERITS
'('
LET
OBJECTID temp
':'
TYPEID String
FI
OBJECTID n
INHERITS
ELSE
'{'
INHERITS
INHERITS
WHILE
OBJECTID position
'<'
IN
OBJECTID um
LOOP
INHERITS
INHERITS
ELSE
'{'
INHERITS
INHERITS
INHERITS
OBJECTID temp
ASSIGN
OBJECTID temp
'.'
OBJECTID concat
'('
OBJECTID cell_at_next_evolution
'('
OBJECTID position
')'
')'
';'
INHERITS
INHERITS
INHERITS
OBJECTID position
ASSIGN
OBJECTID position
'+'
INT_CONST 1
';'
INHERITS
INHERITS
ELSE
'}'
INHERITS
INHERITS
POOL
';'
INHERITS
INHERITS
OBJECTID population_map
ASSIGN
OBJECTID temp
';'
INHERITS
INHERITS
OBJECTID self
';'
INHERITS
ELSE
'}'
INHERITS
')'
')'
')'
ELSE
'}'
';'
OBJECTID option
'('
')'
':'
TYPEID String
'{'
'{'
FI
'('
LET
IN
OBJECTID um
':'
FI
OBJECTID nt
FI
OBJECTID n
LET
'{'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID nPlease
OBJECTID chose
OBJECTID a
IN
OBJECTID umber
':'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t1
':'
TYPEID A
OBJECTID cross
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t2
':'
TYPEID A
OBJECTID slash
IF
OBJECTID rom
THEN
OBJECTID upper
OBJECTID left
OBJECTID to
OBJECTID lower
OBJECTID right
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t3
':'
TYPEID A
OBJECTID slash
IF
OBJECTID rom
THEN
OBJECTID upper
OBJECTID right
OBJECTID to
OBJECTID lower
OBJECTID left
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t4
':'
TYPEID An
TYPEID X
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t5
':'
TYPEID A
OBJECTID greater
OBJECTID than
OBJECTID sign
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t6
':'
TYPEID A
OBJECTID less
OBJECTID than
OBJECTID sign
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t7
':'
TYPEID Two
OBJECTID greater
OBJECTID than
OBJECTID signs
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t8
':'
TYPEID Two
OBJECTID less
OBJECTID than
OBJECTID signs
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t9
':'
TYPEID A
LEXER BUG - UNMATCHED: '
TYPEID V
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t10
':'
TYPEID An
FI
OBJECTID nverse
LEXER BUG - UNMATCHED: '
TYPEID V
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t11
':'
IN
OBJECTID umbers
INT_CONST 9
OBJECTID and
INT_CONST 10
OBJECTID combined
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t12
':'
TYPEID A
IF
OBJECTID ull
OBJECTID grid
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t13
':'
TYPEID A
LEXER BUG - UNMATCHED: '
TYPEID T
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t14
':'
TYPEID A
OBJECTID plus
LEXER BUG - UNMATCHED: '
'+'
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t15
':'
TYPEID A
LEXER BUG - UNMATCHED: '
TYPEID W
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t16
':'
TYPEID An
LEXER BUG - UNMATCHED: '
TYPEID M
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t17
':'
TYPEID An
LEXER BUG - UNMATCHED: '
TYPEID E
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t18
':'
TYPEID A
LEXER BUG - UNMATCHED: '
INT_CONST 3
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t19
':'
TYPEID An
LEXER BUG - UNMATCHED: '
TYPEID O
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t20
':'
TYPEID An
LEXER BUG - UNMATCHED: '
INT_CONST 8
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID t21
':'
TYPEID An
LEXER BUG - UNMATCHED: '
TYPEID S
LEXER BUG - UNMATCHED: '
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
STR_CONST "Your choice => "
')'
';'
THEN
OBJECTID um
ASSIGN
FI
OBJECTID n_int
'('
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
IF
IN
OBJECTID um
'='
INT_CONST 1
THEN
ELSE
STR_CONST " XX  XXXX XXXX  XX  "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 2
THEN
ELSE
STR_CONST "    X   X   X   X   X    "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 3
THEN
ELSE
STR_CONST "X     X     X     X     X"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 4
THEN
STR_CONST "X   X X X   X   X X X   X"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 5
THEN
STR_CONST "X     X     X   X   X    "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 6
THEN
STR_CONST "    X   X   X     X     X"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 7
THEN
STR_CONST "X  X  X  XX  X      "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 8
THEN
STR_CONST " X  XX  X  X  X     "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 9
THEN
STR_CONST "X   X X X   X  "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 10
THEN
STR_CONST "  X   X X X   X"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 11
THEN
STR_CONST "X X X X X X X X"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 12
THEN
STR_CONST "XXXXXXXXXXXXXXXXXXXXXXXXX"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 13
THEN
ELSE
STR_CONST "XXXXX  X    X    X    X  "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 14
THEN
ELSE
STR_CONST "  X    X  XXXXX  X    X  "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 15
THEN
ELSE
STR_CONST "X     X X X X   X X  "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 16
THEN
ELSE
STR_CONST "  X X   X X X X     X"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 17
THEN
STR_CONST "XXXXX   X   XXXXX   X   XXXX"
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 18
THEN
STR_CONST "XXX    X   X  X    X   XXXX "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 19
THEN
STR_CONST " XX X  XX  X XX "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 20
THEN
STR_CONST " XX X  XX  X XX X  XX  X XX "
ELSE
OBJECTID lse
FI
FI
OBJECTID num
'='
INT_CONST 21
THEN
STR_CONST " XXXX   X    XX    X   XXXX "
ELSE
OBJECTID lse
STR_CONST "                         "
FI
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
IF
IF
FI
';'
ELSE
'}'
LET
')'
';'
'}'
'}'
';'
OBJECTID prompt
'('
')'
':'
TYPEID Bool
'{'
'{'
FI
'('
LET
OBJECTID ans
':'
TYPEID String
FI
OBJECTID n
LET
'{'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
TYPEID Would
OBJECTID you
OBJECTID like
OBJECTID to
OBJECTID continue
OBJECTID with
THEN
OBJECTID next
OBJECTID generation
LEXER BUG - UNMATCHED: ?
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
STR_CONST "Please use lowercase y or n for your answer [y]: "
')'
';'
LET
OBJECTID ans
ASSIGN
FI
OBJECTID n_string
'('
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
IF
OBJECTID ans
'='
STR_CONST "n"
THEN
BOOL_CONST false
ELSE
OBJECTID lse
BOOL_CONST true
LET
FI
';'
LET
'}'
FI
')'
';'
'}'
'}'
';'
OBJECTID prompt2
'('
')'
':'
TYPEID Bool
'{'
FI
'('
LET
OBJECTID ans
':'
TYPEID String
FI
OBJECTID n
LET
'{'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
TYPEID Would
OBJECTID you
OBJECTID like
OBJECTID to
OBJECTID choose
OBJECTID a
OBJECTID background
OBJECTID pattern
LEXER BUG - UNMATCHED: ?
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
STR_CONST "Please use lowercase y or n for your answer [n]: "
')'
';'
LET
OBJECTID ans
ASSIGN
FI
OBJECTID n_string
'('
')'
';'
LET
IF
OBJECTID ans
'='
STR_CONST "y"
THEN
BOOL_CONST true
ELSE
OBJECTID lse
BOOL_CONST false
LET
FI
';'
LET
'}'
FI
')'
'}'
';'
'}'
';'
CLASS
TYPEID Main
FI
OBJECTID nherits
TYPEID CellularAutomaton
'{'
ELSE
OBJECTID cells
':'
TYPEID CellularAutomaton
';'
LET
ELSE
OBJECTID main
'('
')'
':'
TYPEID SELF_TYPE
'{'
INHERITS
'{'
'('
LET
OBJECTID continue
':'
TYPEID Bool
FI
IN
FI
'('
LET
OBJECTID choice
':'
TYPEID String
FI
IN
LET
'{'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
TYPEID Welcome
OBJECTID to
THEN
TYPEID Game
OF
TYPEID Life
'.'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
OBJECTID out_string
'('
LEXER BUG - UNMATCHED: "
TYPEID There
OBJECTID are
OBJECTID many
FI
OBJECTID nitial
OBJECTID states
OBJECTID to
OBJECTID choose
IF
OBJECTID rom
'.'
LEXER BUG - UNMATCHED: \
OBJECTID n
LEXER BUG - UNMATCHED: "
')'
';'
LET
WHILE
OBJECTID prompt2
'('
')'
LOOP
ELSE
'{'
CLASS
OBJECTID continue
ASSIGN
BOOL_CONST true
';'
CLASS
OBJECTID choice
ASSIGN
OBJECTID option
'('
')'
';'
CLASS
OBJECTID cells
ASSIGN
'('
NEW
TYPEID CellularAutomaton
')'
'.'
OBJECTID init
'('
OBJECTID choice
')'
';'
CLASS
OBJECTID cells
'.'
OBJECTID print
'('
')'
';'
INHERITS
CLASS
WHILE
OBJECTID continue
LOOP
IF
OBJECTID prompt
'('
')'
THEN
INHERITS
INHERITS
ELSE
'{'
INHERITS
INHERITS
INHERITS
OBJECTID cells
'.'
OBJECTID evolve
'('
')'
';'
INHERITS
INHERITS
INHERITS
OBJECTID cells
'.'
OBJECTID print
'('
')'
';'
INHERITS
INHERITS
ELSE
'}'
ELSE
ELSE
OBJECTID continue
ASSIGN
IF
OBJECTID alse
CLASS
IF
IF
INHERITS
INHERITS
POOL
';'
INHERITS
ELSE
'}'
INHERITS
ELSE
POOL
';'
CLASS
OBJECTID elf
';'
CLASS
'}'
FI
')'
')'
';'
'}'
ELSE
'}'
';'
'}'
';'
